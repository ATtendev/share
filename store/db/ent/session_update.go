// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ATtendev/share/store/db/ent/predicate"
	"github.com/ATtendev/share/store/db/ent/schema"
	"github.com/ATtendev/share/store/db/ent/session"
	"github.com/ATtendev/share/store/db/ent/user"
	"github.com/google/uuid"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SessionUpdate) SetUpdatedAt(t time.Time) *SessionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeleteAt sets the "delete_at" field.
func (su *SessionUpdate) SetDeleteAt(t time.Time) *SessionUpdate {
	su.mutation.SetDeleteAt(t)
	return su
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (su *SessionUpdate) SetNillableDeleteAt(t *time.Time) *SessionUpdate {
	if t != nil {
		su.SetDeleteAt(*t)
	}
	return su
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (su *SessionUpdate) ClearDeleteAt() *SessionUpdate {
	su.mutation.ClearDeleteAt()
	return su
}

// SetUserID sets the "user_id" field.
func (su *SessionUpdate) SetUserID(u uuid.UUID) *SessionUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SessionUpdate) SetNillableUserID(u *uuid.UUID) *SessionUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SessionUpdate) SetDescription(s string) *SessionUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SessionUpdate) SetNillableDescription(s *string) *SessionUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SessionUpdate) ClearDescription() *SessionUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetTitle sets the "title" field.
func (su *SessionUpdate) SetTitle(s string) *SessionUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SessionUpdate) SetNillableTitle(s *string) *SessionUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetPosition sets the "position" field.
func (su *SessionUpdate) SetPosition(s []schema.Point) *SessionUpdate {
	su.mutation.SetPosition(s)
	return su
}

// AppendPosition appends s to the "position" field.
func (su *SessionUpdate) AppendPosition(s []schema.Point) *SessionUpdate {
	su.mutation.AppendPosition(s)
	return su
}

// ClearPosition clears the value of the "position" field.
func (su *SessionUpdate) ClearPosition() *SessionUpdate {
	su.mutation.ClearPosition()
	return su
}

// SetIsFinished sets the "is_finished" field.
func (su *SessionUpdate) SetIsFinished(b bool) *SessionUpdate {
	su.mutation.SetIsFinished(b)
	return su
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (su *SessionUpdate) SetNillableIsFinished(b *bool) *SessionUpdate {
	if b != nil {
		su.SetIsFinished(*b)
	}
	return su
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (su *SessionUpdate) SetUsersID(id uuid.UUID) *SessionUpdate {
	su.mutation.SetUsersID(id)
	return su
}

// SetUsers sets the "users" edge to the User entity.
func (su *SessionUpdate) SetUsers(u *User) *SessionUpdate {
	return su.SetUsersID(u.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (su *SessionUpdate) Mutation() *SessionMutation {
	return su.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (su *SessionUpdate) ClearUsers() *SessionUpdate {
	su.mutation.ClearUsers()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SessionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := session.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SessionUpdate) check() error {
	if _, ok := su.mutation.UsersID(); su.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Session.users"`)
	}
	return nil
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(session.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeleteAt(); ok {
		_spec.SetField(session.FieldDeleteAt, field.TypeTime, value)
	}
	if su.mutation.DeleteAtCleared() {
		_spec.ClearField(session.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(session.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(session.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Position(); ok {
		_spec.SetField(session.FieldPosition, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedPosition(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, session.FieldPosition, value)
		})
	}
	if su.mutation.PositionCleared() {
		_spec.ClearField(session.FieldPosition, field.TypeJSON)
	}
	if value, ok := su.mutation.IsFinished(); ok {
		_spec.SetField(session.FieldIsFinished, field.TypeBool, value)
	}
	if su.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   session.UsersTable,
			Columns: []string{session.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   session.UsersTable,
			Columns: []string{session.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SessionUpdateOne) SetUpdatedAt(t time.Time) *SessionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeleteAt sets the "delete_at" field.
func (suo *SessionUpdateOne) SetDeleteAt(t time.Time) *SessionUpdateOne {
	suo.mutation.SetDeleteAt(t)
	return suo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableDeleteAt(t *time.Time) *SessionUpdateOne {
	if t != nil {
		suo.SetDeleteAt(*t)
	}
	return suo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (suo *SessionUpdateOne) ClearDeleteAt() *SessionUpdateOne {
	suo.mutation.ClearDeleteAt()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SessionUpdateOne) SetUserID(u uuid.UUID) *SessionUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableUserID(u *uuid.UUID) *SessionUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SessionUpdateOne) SetDescription(s string) *SessionUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableDescription(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SessionUpdateOne) ClearDescription() *SessionUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetTitle sets the "title" field.
func (suo *SessionUpdateOne) SetTitle(s string) *SessionUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableTitle(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetPosition sets the "position" field.
func (suo *SessionUpdateOne) SetPosition(s []schema.Point) *SessionUpdateOne {
	suo.mutation.SetPosition(s)
	return suo
}

// AppendPosition appends s to the "position" field.
func (suo *SessionUpdateOne) AppendPosition(s []schema.Point) *SessionUpdateOne {
	suo.mutation.AppendPosition(s)
	return suo
}

// ClearPosition clears the value of the "position" field.
func (suo *SessionUpdateOne) ClearPosition() *SessionUpdateOne {
	suo.mutation.ClearPosition()
	return suo
}

// SetIsFinished sets the "is_finished" field.
func (suo *SessionUpdateOne) SetIsFinished(b bool) *SessionUpdateOne {
	suo.mutation.SetIsFinished(b)
	return suo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableIsFinished(b *bool) *SessionUpdateOne {
	if b != nil {
		suo.SetIsFinished(*b)
	}
	return suo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (suo *SessionUpdateOne) SetUsersID(id uuid.UUID) *SessionUpdateOne {
	suo.mutation.SetUsersID(id)
	return suo
}

// SetUsers sets the "users" edge to the User entity.
func (suo *SessionUpdateOne) SetUsers(u *User) *SessionUpdateOne {
	return suo.SetUsersID(u.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (suo *SessionUpdateOne) Mutation() *SessionMutation {
	return suo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (suo *SessionUpdateOne) ClearUsers() *SessionUpdateOne {
	suo.mutation.ClearUsers()
	return suo
}

// Where appends a list predicates to the SessionUpdate builder.
func (suo *SessionUpdateOne) Where(ps ...predicate.Session) *SessionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SessionUpdateOne) Select(field string, fields ...string) *SessionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Session entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SessionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := session.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SessionUpdateOne) check() error {
	if _, ok := suo.mutation.UsersID(); suo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Session.users"`)
	}
	return nil
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Session.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for _, f := range fields {
			if !session.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(session.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeleteAt(); ok {
		_spec.SetField(session.FieldDeleteAt, field.TypeTime, value)
	}
	if suo.mutation.DeleteAtCleared() {
		_spec.ClearField(session.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(session.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(session.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Position(); ok {
		_spec.SetField(session.FieldPosition, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedPosition(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, session.FieldPosition, value)
		})
	}
	if suo.mutation.PositionCleared() {
		_spec.ClearField(session.FieldPosition, field.TypeJSON)
	}
	if value, ok := suo.mutation.IsFinished(); ok {
		_spec.SetField(session.FieldIsFinished, field.TypeBool, value)
	}
	if suo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   session.UsersTable,
			Columns: []string{session.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   session.UsersTable,
			Columns: []string{session.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Session{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
